{
    "docs": [
        {
            "location": "/", 
            "text": "Embedded Systems\n\n\n\n\nTODO\n\n\nWrite introduction here", 
            "title": "Introduction"
        }, 
        {
            "location": "/#embedded-systems", 
            "text": "TODO  Write introduction here", 
            "title": "Embedded Systems"
        }, 
        {
            "location": "/operating_systems/", 
            "text": "Operating Systems\n\n\nThe Raspberry Pi foundation provides several ready to use operating system images for the Pi. At the moment of this writing the following are available:\n\n\n\n\nRaspbian - The Foundation\ns official supported operating system (Debian Jessie)\n\n\nUbuntu Mate - Official Ubuntu flavor featuring the MATE desktop \n\n\nSnappy Ubuntu Core - A new, transactionally-updated Ubuntu for IoT devices, clouds and more\n\n\nOSMC - Open Source Media Centre\n\n\nOPENELEC - Open Embedded Linux Entertainment Centre\n\n\nPINET - Raspberry Pi Classroom Management Solution\n\n\nWindows 10 IoT Core\n\n\nRISC OS - A non-Linux distribution\n\n\n\n\nFor this course we will be using the Raspbian image. While Ubuntu Mate features a nicer graphical environment it does however not currently offer a headless installation.\n\n\n\n\nHeadless Installation\n\n\nA headless machine is a machine without a keyboard, mouse and monitor. This means you need to be able to boot the machine to a state where you can remotely access it to finish the installation/configuration process.\n\n\n\n\nWhile the instructions below on how to boot the Raspberry Pi are based on Raspbian, they are very similar for most other distributions.\n\n\nCreating a bootable SD card\n\n\nYou can download the latest image of Raspbian via the Raspberry Pi website (\nhttps://www.raspberrypi.org/downloads/\n). Make sure to pick the \nRaspbian Jessie Lite\n edition. Extract the compressed file on your local disk (using 7-Zip or a similar tool). You should get an image file (.img extension).\n\n\nThe current version at the moment of this writing is of May with a Linux kernel version of 4.4. You can always check out the release notes on \nhttp://downloads.raspberrypi.org/raspbian/release_notes.txt\n. Do note that the lite edition does not include a graphical desktop environment. If this is required than download the normal image.\n\n\nTo boot this Linux distribution we will need to write the image file to an SD card of at least 4GB. A popular tool to write the image to an SD card is \nWin32 Disk Imager\n which can be downloaded at \nhttp://sourceforge.net/projects/win32diskimager\n\n\n\n\nOther host operating systems\n\n\nCheck out \nhttp://www.raspberrypi.org/documentation/installation/installing-images/README.md\n for instructions for different host operating systems such as Linux or Mac.\n\n\n\n\nSelect the correct device letter and load the Linux image from your local drive as shown in the image below. If you\nre ready, hit the write button and grab a cup of coffee. You can also create a backup of your current SD card by reading from the SD card to an image file. Just make sure to select a new image file name. Do take note that the img file will have the size of your SD card. So using an SD card of 32GB will result in a backup image of 32GB.\n\n\n\n\nWin32 Disk Imager\n\n\n\n\n\n\nOnce the write process is finished you can remove the SD card and plug it in the Raspberry Pi. Just make sure to disconnect the power before inserting the SD card.\n\n\nIf you want your Pi to be connected to your local area network (LAN), you will have to plug in the Ethernet cable before booting the Pi. The Pi is default configured to acquire an IP address using DHCP.\n\n\nInteracting with the Raspberry Pi\n\n\nBooting the Raspberry Pi is really simple. All you have to do is fit in the SD card and plug in the supply adapter. It automatically boots from the SD card. Interacting with the Linux operating system from that point on can be a bit harder in certain situations.\n\n\nGraphical Desktop Environment\n\n\nIf you deployed an OS such as Raspbian than you can attach an HDMI display or RCA Video compatible device (yellow connector on the board). You will also have to connect a USB keyboard to the Pi to be able to control the Pi. Depending on the edition (normal or lite), you will get a graphical desktop environment or a tty terminal.\n\n\n\n\nRaspbian Graphical Desktop Environment\n\n\n\n\n\n\n\n\nRaspbian TTY Terminal\n\n\n\n\n\n\n\n\nTODO\n\n\nJump to Section 3.3 to configure the Pi for initial use by means of the configuration menu.\n\n\n\n\nSSH Connection\n\n\nRaspbian comes default with the SSH daemon enabled. This allows us to connect to the Pi from a remote computer using the SSH protocol. Before we can do this we will have to determine the IP address of the Pi. In case of a home network you can log on to your router and look for the last IP address that was given by your DHCP server running on the router.\n\n\n\n\nSSH\n\n\nSSH or Secure Shell is a secure way to connect to a device and execute commands from a distance. In the old days Telnet was the way to go but it sends all commands and login information as clear text. With SSH everything is encrypted. Default SSH daemon listen on port 22. See chapter xxxx for more information on SSH.\n\n\n\n\nAnother option can be a network scan tool such as SoftPerfect Network Scanner (can be downloaded from \nhttp://www.softperfect.com/products/networkscanner/\n) which allows you to scan a range of IP addresses and display some basic information about them such as the MAC (Media Access Control) address and the hostname.\n\n\nThis would not be an option in a LAB if there are 12 Pi\ns connected to the same subnet all with the default configuration of Raspbian. However for your convenience we added labels on the Pi\ns with their respective MAC addresses so you can identify which Pi is yours.\n\n\n\n\nNetwork scan using SoftPerfect Network Scanner\n\n\n\n\n\n\nAnother option is using WireShark and watch the communication on the network. Especially the DHCP traffic which distributes IP addresses to the connected client devices. This way you can also identify what IP address is given to your device (if you know the MAC address of your device).\n\n\n\n\nWireshark\n\n\nWireshark, originally named Ethereal, is a free and open-source packet analyzer. It is used for network troubleshooting, analysis, software and communications protocol development, and education. It can be downloaded from \nhttps://www.wireshark.org\n.\n\n\n\n\nConnecting to a device using the SSH protocol can be easily achieved using a terminal tool such as Putty. All you have to do is start Putty and select the SSH connection option and specify the IP address of the device as shown in Figure 6. Once the connection is configured you can open it.\n\n\n\n\nPutty\n\n\nPuTTY is a free implementation of Telnet and SSH for Windows and Unix platforms, along with an xterm terminal emulator. It can be downloaded from \nhttp://www.chiark.greenend.org.uk/~sgtatham/putty\n.\n\n\n\n\n\n\nOpening an SSH connection using Putty\n\n\n\n\n\n\nYou will be presented with the command line interface (CLI) of the Linux operating system running on your device. The first thing you will see is a login screen similar to the one shown below.\n\n\n\n\nThe login screen of the Raspbian distribution running on the Pi\n\n\n\n\n\n\nThe default username and password can be found on the Raspberry Pi website. For Raspbian it is \npi\n as username and \nraspberry\n as password. Once you login with these credentials you are presented with the command line interface as shown below. From this point on you can start to execute commands on the Pi.\n\n\n\n\nThe command line interface after logging in\n\n\n\n\n\n\nOne of the most useful commands you should remember is the \nifconfig\n command which displays the current network interfaces and their configuration parameters. If you execute the command you should get a similar output to the one shown in the figure below. Try to identify the IP address and MAC address of the primary Ethernet interface (eth0).\n\n\n\n\nOutput of the ifconfig command\n\n\n\n\n\n\nRS232 Connection\n\n\nA last option that can be used to connect to the Raspberry Pi is using a serial connection. This is often used for debugging embedded systems because it is a very basic connection type. Because of this the kernel will also output its kernel messages (debugging information and errors) to this connection. Since most computers these days lack the serial interface we can use a simple RS232 to USB converter such as the PL-2303HX.\n\n\nTo attach the converter we do have to take a look at the pinout of the GPIO connector on the Raspberry Pi board, shown in the figure below.", 
            "title": "Operating Systems"
        }, 
        {
            "location": "/operating_systems/#operating-systems", 
            "text": "The Raspberry Pi foundation provides several ready to use operating system images for the Pi. At the moment of this writing the following are available:   Raspbian - The Foundation s official supported operating system (Debian Jessie)  Ubuntu Mate - Official Ubuntu flavor featuring the MATE desktop   Snappy Ubuntu Core - A new, transactionally-updated Ubuntu for IoT devices, clouds and more  OSMC - Open Source Media Centre  OPENELEC - Open Embedded Linux Entertainment Centre  PINET - Raspberry Pi Classroom Management Solution  Windows 10 IoT Core  RISC OS - A non-Linux distribution   For this course we will be using the Raspbian image. While Ubuntu Mate features a nicer graphical environment it does however not currently offer a headless installation.   Headless Installation  A headless machine is a machine without a keyboard, mouse and monitor. This means you need to be able to boot the machine to a state where you can remotely access it to finish the installation/configuration process.   While the instructions below on how to boot the Raspberry Pi are based on Raspbian, they are very similar for most other distributions.", 
            "title": "Operating Systems"
        }, 
        {
            "location": "/operating_systems/#creating-a-bootable-sd-card", 
            "text": "You can download the latest image of Raspbian via the Raspberry Pi website ( https://www.raspberrypi.org/downloads/ ). Make sure to pick the  Raspbian Jessie Lite  edition. Extract the compressed file on your local disk (using 7-Zip or a similar tool). You should get an image file (.img extension).  The current version at the moment of this writing is of May with a Linux kernel version of 4.4. You can always check out the release notes on  http://downloads.raspberrypi.org/raspbian/release_notes.txt . Do note that the lite edition does not include a graphical desktop environment. If this is required than download the normal image.  To boot this Linux distribution we will need to write the image file to an SD card of at least 4GB. A popular tool to write the image to an SD card is  Win32 Disk Imager  which can be downloaded at  http://sourceforge.net/projects/win32diskimager   Other host operating systems  Check out  http://www.raspberrypi.org/documentation/installation/installing-images/README.md  for instructions for different host operating systems such as Linux or Mac.   Select the correct device letter and load the Linux image from your local drive as shown in the image below. If you re ready, hit the write button and grab a cup of coffee. You can also create a backup of your current SD card by reading from the SD card to an image file. Just make sure to select a new image file name. Do take note that the img file will have the size of your SD card. So using an SD card of 32GB will result in a backup image of 32GB.   Win32 Disk Imager    Once the write process is finished you can remove the SD card and plug it in the Raspberry Pi. Just make sure to disconnect the power before inserting the SD card.  If you want your Pi to be connected to your local area network (LAN), you will have to plug in the Ethernet cable before booting the Pi. The Pi is default configured to acquire an IP address using DHCP.", 
            "title": "Creating a bootable SD card"
        }, 
        {
            "location": "/operating_systems/#interacting-with-the-raspberry-pi", 
            "text": "Booting the Raspberry Pi is really simple. All you have to do is fit in the SD card and plug in the supply adapter. It automatically boots from the SD card. Interacting with the Linux operating system from that point on can be a bit harder in certain situations.", 
            "title": "Interacting with the Raspberry Pi"
        }, 
        {
            "location": "/operating_systems/#graphical-desktop-environment", 
            "text": "If you deployed an OS such as Raspbian than you can attach an HDMI display or RCA Video compatible device (yellow connector on the board). You will also have to connect a USB keyboard to the Pi to be able to control the Pi. Depending on the edition (normal or lite), you will get a graphical desktop environment or a tty terminal.   Raspbian Graphical Desktop Environment     Raspbian TTY Terminal     TODO  Jump to Section 3.3 to configure the Pi for initial use by means of the configuration menu.", 
            "title": "Graphical Desktop Environment"
        }, 
        {
            "location": "/operating_systems/#ssh-connection", 
            "text": "Raspbian comes default with the SSH daemon enabled. This allows us to connect to the Pi from a remote computer using the SSH protocol. Before we can do this we will have to determine the IP address of the Pi. In case of a home network you can log on to your router and look for the last IP address that was given by your DHCP server running on the router.   SSH  SSH or Secure Shell is a secure way to connect to a device and execute commands from a distance. In the old days Telnet was the way to go but it sends all commands and login information as clear text. With SSH everything is encrypted. Default SSH daemon listen on port 22. See chapter xxxx for more information on SSH.   Another option can be a network scan tool such as SoftPerfect Network Scanner (can be downloaded from  http://www.softperfect.com/products/networkscanner/ ) which allows you to scan a range of IP addresses and display some basic information about them such as the MAC (Media Access Control) address and the hostname.  This would not be an option in a LAB if there are 12 Pi s connected to the same subnet all with the default configuration of Raspbian. However for your convenience we added labels on the Pi s with their respective MAC addresses so you can identify which Pi is yours.   Network scan using SoftPerfect Network Scanner    Another option is using WireShark and watch the communication on the network. Especially the DHCP traffic which distributes IP addresses to the connected client devices. This way you can also identify what IP address is given to your device (if you know the MAC address of your device).   Wireshark  Wireshark, originally named Ethereal, is a free and open-source packet analyzer. It is used for network troubleshooting, analysis, software and communications protocol development, and education. It can be downloaded from  https://www.wireshark.org .   Connecting to a device using the SSH protocol can be easily achieved using a terminal tool such as Putty. All you have to do is start Putty and select the SSH connection option and specify the IP address of the device as shown in Figure 6. Once the connection is configured you can open it.   Putty  PuTTY is a free implementation of Telnet and SSH for Windows and Unix platforms, along with an xterm terminal emulator. It can be downloaded from  http://www.chiark.greenend.org.uk/~sgtatham/putty .    Opening an SSH connection using Putty    You will be presented with the command line interface (CLI) of the Linux operating system running on your device. The first thing you will see is a login screen similar to the one shown below.   The login screen of the Raspbian distribution running on the Pi    The default username and password can be found on the Raspberry Pi website. For Raspbian it is  pi  as username and  raspberry  as password. Once you login with these credentials you are presented with the command line interface as shown below. From this point on you can start to execute commands on the Pi.   The command line interface after logging in    One of the most useful commands you should remember is the  ifconfig  command which displays the current network interfaces and their configuration parameters. If you execute the command you should get a similar output to the one shown in the figure below. Try to identify the IP address and MAC address of the primary Ethernet interface (eth0).   Output of the ifconfig command", 
            "title": "SSH Connection"
        }, 
        {
            "location": "/operating_systems/#rs232-connection", 
            "text": "A last option that can be used to connect to the Raspberry Pi is using a serial connection. This is often used for debugging embedded systems because it is a very basic connection type. Because of this the kernel will also output its kernel messages (debugging information and errors) to this connection. Since most computers these days lack the serial interface we can use a simple RS232 to USB converter such as the PL-2303HX.  To attach the converter we do have to take a look at the pinout of the GPIO connector on the Raspberry Pi board, shown in the figure below.", 
            "title": "RS232 Connection"
        }, 
        {
            "location": "/virtual_machine/", 
            "text": "Running a Virtual Development Machine\n\n\nA virtual machine (VM) is an emulation of a particular computer system. This system can be based on an existing or hypothetical machine. As a user we can create such virtual machines and install an operating system of choice on them. This allows us to run a Linux distribution while working on a Windows machine and vice versa.\n\n\nSeveral software packages are available to create and run virtual machines. Examples are VMware,  Hyper-V  which comes with Windows 8,  Oracle VirtualBox,  \n For our labs we will be using VirtualBox as this is free,  lightweight,  easy to use and available for Windows,  Linux,  Mac and Solaris.\n\n\n\n\nHyper-V\n\n\nHyper-V,  codenamed Viridian and formerly known as Windows Server Virtualization,  is a native hypervisor; it can create virtual machines on x86-64 systems. Starting with Windows 8,  Hyper-V supersedes Windows Virtual PC as the hardware virtualization component of the client editions of Windows NT.\n\n\n\n\nInstalling Virtual Box\n\n\nStart by going to the download section of the website of VirtualBox (\nhttps://www.virtualbox.org\n). Download the VirtualBox platform package for your system. At the moment of this writing the current version of VirtualBox is 5.0.20. When running the installer package make sure to install VirtualBox with all features enabled as shown in the figure below.\n\n\n\n\nInstalling VirtualBox with all features enabled\n\n\n\n\n\n\nNext we also need to install the extension pack which introduces USB2.0 and USB3.0 support and some other extra features. You can download the extension pack on the same page as you downloaded the installer for VirtualBox. Just make sure to pick the correct version for your current VirtualBox version.\n\n\nThe installer of VirtualBox should also have created a virtual network adapter (such as can be seen in the figure below) which is used for private networking between the host machine and the virtual machine.\n\n\n\n\nVirtualBox virtual network adapters\n\n\n\n\n\n\nOnce you\u2019re finished you can start the VirtualBox client and you should get the interface presented in the figure below:\n\n\n\n\nLaunching VirtualBox after installation\n\n\n\n\n\n\nUnder \nFiles =\n Preferences =\n General\n you can change the default path for your virtual machines. Do take note that you will need about 25GB of free space for each VM. For these labs you will most likely only need 1 VM.\n\n\nUnder \nFiles =\n Preferences =\n Language\n you can also change the default interface language if you wish.\n\n\nCreating a Virtual Machine\n\n\nCreating a virtual machine is very simple as it just following the steps presented to you by the wizard. To start the process of creating a VM hit the New button on the main interface of VirtualBox.\n\n\nThe first step consist of giving your VM a name and selecting the operating system you will be running on the VM as shown in the figure below. In our case we will use Linux Mint 17.3 (Rosa) - Cinnamon (64-bit). More on this later.\n\n\n\n\nCreating a VM - The name and OS\n\n\n\n\n\n\nNext we need to select the amount of memory we want to assign to the virtual machine. The recommended amount is 512MB. However if you have more than 4GB,  select 1024MB or even 2048MB,  which will improve the responsiveness and performance of the VM.\n\n\n\n\nCreating a VM - Amount of memory\n\n\n\n\n\n\nNext we need to choose what if we want to create a new or use an existing virtual hard drive. Pick the option to create one now as depicted in the figure below. This will launch another wizard which will lead us through the creation process of a virtual drive.\n\n\n\n\nCreating a VM - Virtual hard drive\n\n\n\n\n\n\nThe first screen will allow us to select what type of virtual drive file we want to create. Just leave the default option (VDI \u2013 Virtual Disk Image).\n\n\n\n\nCreating a VM - Hard drive file type\n\n\n\n\n\n\nIn the next step we get the option to create a dynamically allocated image or a fixed size image as can be seen in the figure below. A fixed size image is faster but will take up the full space we select for the size of the virtual drive. A dynamically allocated image is slower but will only grow in size when needed. You will need to decide this for yourself based on the free space available on your host system.\n\n\n\n\nCreating a VM - Virtual drive allocation method\n\n\n\n\n\n\nNow we need to select the hard drive file location (leave it as is) and size of the drive. Make sure to select \nat least 25GB for the size\n as shown in the figure below. Hitting create will finish the process of creating a VM.\n\n\n\n\nCreating a VM - Location and size of the virtual drive\n\n\n\n\n\n\nYour new VM should now appear in the list of VM\ns on the left side of the VirtualBox main interface. Selecting a VM in the list also displays some basic information about the VM.\n\n\n\n\nA new VM is added to your current list of VM\ns\n\n\n\n\n\n\nConfiguring the Virtual Machine\n\n\nBefore installing an operating system on the newly created VM it is necessary to make a few configuration changes. Select the new VM and hit the \nSettings\n button on the main interface. You will be presented with the configuration settings of your VM.\n\n\nStart by going to \nGeneral =\n Advanced\n and enabling the \nbidirectional shared clipboard\n. This allows text to be copied to the clipboard in the VM and pasted in your host OS and vice versa. Also enable \nbidirectional Drag\nn Drop\n. The resulting configuration is shown in the figure below.\n\n\n\n\nConfigure VM to allow bidirectional clipboard and drag\nn drop\n\n\n\n\n\n\nDefault the VM is configured with a single network adapter with NAT (Network Address Translation) enabled (Network tab). This means that the VM has access to the network and also has access to the Internet. However because of NAT we will not be able to connect to the VM from another machine using SSH without configuring port forwarding. Since later on in the LAB\ns we will need to do just that it is more convenient to change the network settings to a \nBridged Adapter\n as shown in the figure below. Make sure to the select your physical Ethernet adapter to bridge with and not your wireless interface.\n\n\n\n\nConfigure VM to bridge the virtual and physical adapters\n\n\n\n\n\n\n\n\nBridged Adapter\n\n\nThis will basically create a network bridge between the VM\ns network adapter and your physical host adapter making your VM\ns directly available on your network. This may be a security issue but can also simplify working with your VM. This option also implies that your VM will get its IP address from the same DHCP (Dynamic Host Configuration Protocol) server as your host machine if you have a DHCP enabled network.\n\n\n\n\nInstalling an Operating System on the Virtual Machine\n\n\nBefore we can install an operating system on our virtual machine,  it is necessary to download an installation image for the Linux distribution we will be using. This image can then be mounted on our VM allowing us to boot from it. In our case we will use Linux Mint 17.3 (Rosa) - Cinnamon (64-bit),  which can be downloaded from \nhttps://www.linuxmint.com/download.php\n. Make sure to select the 64-bit Desktop edition. Linux Mint is derivative of Ubuntu,  but with a less intrusive graphical desktop environment.\n\n\nOnce downloaded start VirtualBox and open the setting of your VM. Next open the storage settings. Now select the virtual CD/DVD drive below the IDE controller as shown in step 1 in the figure below:\n\n\n\n\nSteps for mounting an image in VirtualBox\n\n\n\n\n\n\nHit the small CD/DVD icon next to the IDE Secondary Master dropdown (step 2 in the figure above) and select \nChoose a virtual CD/DVD disk file \n A browse window will open; select the image file you downloaded from the Linux Mint website and hit OK. Hit the OK button of the setting panel to close it.\n\n\nReady ? Then hit the start button of the VM and follow the steps for installing the Linux Mint operating system. If you see the automatic boot screen shown below do nothing an let it pass. Linux Mint will boot in Live mode and allow you to start the install process from that point on.\n\n\n\n\nLive DVD or boot menu option\n\n\n\n\n\n\nTo start the installation process just double click the \nInstall Linux Mint\n icon on the desktop.\n\n\n\n\nStarting the installation process\n\n\n\n\n\n\nFrom this point on all steps are self-explanatory. Most of the installation steps can be kept to their default values.\n\n\nIf you click inside the VM window your mouse cursor will automatically be captured. Releasing your cursor can be achieved using the right CTRL key.\n\n\nOnce the installation procedure is finished you will be asked to reboot the VM.\n\n\nInstalling Guest Additions\n\n\nYou may or may not have noticed that your mouse movement is a bit sluggish within the VM. That is because the guest additions haven not been installed yet.\n\n\nOpen the Devices menu which can be found at the top of the VM window. Next select \nInsert Guest Additions CD image \n as shown in the figure below. A window in Linux will open asking if you\nd wish to run the package. Hit run and follow the instructions.\n\n\n\n\nInserting the Guest Additions for Linux Mint\n\n\n\n\n\n\nOnce finished remove the image from the virtual drive (by right clicking the icon on the Desktop of Linux Mint and choosing Eject). Restart the virtual machine.\n\n\n\n\nUpdates\n\n\nIf you update your machine it is necessary to repeat this procedure.\n\n\n\n\nYou should now be able to resize the guest window. Or you can switch to fullscreen by hitting \nRCTRL-F\n.\n\n\n\n\nSoftware Rendering Mode\n\n\nIf you get a popup after login saying that Linux Mint is running in software rendering mode,  it can be fixed by going to \nSettings =\n Display =\n Screen\n and enabling \n3D Acceleration\n of your virtual machine. Make sure to restart the VM.\n\n\n\n\nCreating a shared folder\n\n\nSome files can be dragged and dropped between your host machine and the VM. However this does not seem to be possible for all file types. For these instances it is more easy to create a shared directory which can be accessed from your host and the VM.\n\n\nNavigate to \nSettings =\n Shared Folders\n of your virtual machine as depicted in the figure below:\n\n\n\n\nShared folders settings of VM\n\n\n\n\n\n\nCreate a shared folder on your system and make sure to select the \nAuto-mount\n option as shown in the figure below.\n\n\n\n\nCreating a shared folder for your VM\n\n\n\n\n\n\nThe folder should now be automatically mounted under /media in your VM on your next reboot and should also be available on the Desktop of Linux Mint. However if you try to open the folder you will get a permission error. To fix this it is ncessary to add your used to the group \nvboxsf\n. You can achieve this by opening up a terminal (\nCTRL-ALT-T\n) and entering the command below. More on this later.\n\n\n$ sudo usermod -a -G vboxsf \nyour_account_name\n\n\n\n\n\n\n\nCommand Line instructions\n\n\nNote how the commands in this course are all proceeded by the dollar sign ($). This is the symbol that indicates the end of the prompt and should not be typed. Different distributions or shells may show different symbols for this.\n\n\n\n\nNext logout from the current session and log back in. Open up a new terminal and enter the \nid\n command to get a list of all the groups your user belongs to. \n111(vboxsf)\n should be one of them.\n\n\n$ id\nuid=1000(bioboost) gid=1000(bioboost) groups=1000(bioboost), 4(adm), 24(cdrom), 27(sudo), 30(dip), 46(plugdev), 107(lpadmin), 110(sambashare), 111(vboxsf)\n\n\n\n\nBackups and snapshots\n\n\nIt is always a good idea to backup your project files. You can now easily copy them to shared folder and put them on OneDrive, DropBox or a USB stick.\n\n\nAnother good idea is to create periodical snapshots of your virtual machine. This snapshot will contain all the delta\ns compared to the previous state of the VM. Just select the VM you want to create a snapshot of and hit the \nSnapshots\n button in the top right corner of VirtualBox. Next click the left icon to create a snapshot. Fill in the name and description as shown in the figure below.\n\n\n\n\nCreating a VM snapshot\n\n\n\n\n\n\nAdding a decent description will save you the misery of having the search through the snapshots for the correct state if your VM should fail.\n\n\nYou could even do this after every LAB session.", 
            "title": "Virtual Machine"
        }, 
        {
            "location": "/virtual_machine/#running-a-virtual-development-machine", 
            "text": "A virtual machine (VM) is an emulation of a particular computer system. This system can be based on an existing or hypothetical machine. As a user we can create such virtual machines and install an operating system of choice on them. This allows us to run a Linux distribution while working on a Windows machine and vice versa.  Several software packages are available to create and run virtual machines. Examples are VMware,  Hyper-V  which comes with Windows 8,  Oracle VirtualBox,    For our labs we will be using VirtualBox as this is free,  lightweight,  easy to use and available for Windows,  Linux,  Mac and Solaris.   Hyper-V  Hyper-V,  codenamed Viridian and formerly known as Windows Server Virtualization,  is a native hypervisor; it can create virtual machines on x86-64 systems. Starting with Windows 8,  Hyper-V supersedes Windows Virtual PC as the hardware virtualization component of the client editions of Windows NT.", 
            "title": "Running a Virtual Development Machine"
        }, 
        {
            "location": "/virtual_machine/#installing-virtual-box", 
            "text": "Start by going to the download section of the website of VirtualBox ( https://www.virtualbox.org ). Download the VirtualBox platform package for your system. At the moment of this writing the current version of VirtualBox is 5.0.20. When running the installer package make sure to install VirtualBox with all features enabled as shown in the figure below.   Installing VirtualBox with all features enabled    Next we also need to install the extension pack which introduces USB2.0 and USB3.0 support and some other extra features. You can download the extension pack on the same page as you downloaded the installer for VirtualBox. Just make sure to pick the correct version for your current VirtualBox version.  The installer of VirtualBox should also have created a virtual network adapter (such as can be seen in the figure below) which is used for private networking between the host machine and the virtual machine.   VirtualBox virtual network adapters    Once you\u2019re finished you can start the VirtualBox client and you should get the interface presented in the figure below:   Launching VirtualBox after installation    Under  Files =  Preferences =  General  you can change the default path for your virtual machines. Do take note that you will need about 25GB of free space for each VM. For these labs you will most likely only need 1 VM.  Under  Files =  Preferences =  Language  you can also change the default interface language if you wish.", 
            "title": "Installing Virtual Box"
        }, 
        {
            "location": "/virtual_machine/#creating-a-virtual-machine", 
            "text": "Creating a virtual machine is very simple as it just following the steps presented to you by the wizard. To start the process of creating a VM hit the New button on the main interface of VirtualBox.  The first step consist of giving your VM a name and selecting the operating system you will be running on the VM as shown in the figure below. In our case we will use Linux Mint 17.3 (Rosa) - Cinnamon (64-bit). More on this later.   Creating a VM - The name and OS    Next we need to select the amount of memory we want to assign to the virtual machine. The recommended amount is 512MB. However if you have more than 4GB,  select 1024MB or even 2048MB,  which will improve the responsiveness and performance of the VM.   Creating a VM - Amount of memory    Next we need to choose what if we want to create a new or use an existing virtual hard drive. Pick the option to create one now as depicted in the figure below. This will launch another wizard which will lead us through the creation process of a virtual drive.   Creating a VM - Virtual hard drive    The first screen will allow us to select what type of virtual drive file we want to create. Just leave the default option (VDI \u2013 Virtual Disk Image).   Creating a VM - Hard drive file type    In the next step we get the option to create a dynamically allocated image or a fixed size image as can be seen in the figure below. A fixed size image is faster but will take up the full space we select for the size of the virtual drive. A dynamically allocated image is slower but will only grow in size when needed. You will need to decide this for yourself based on the free space available on your host system.   Creating a VM - Virtual drive allocation method    Now we need to select the hard drive file location (leave it as is) and size of the drive. Make sure to select  at least 25GB for the size  as shown in the figure below. Hitting create will finish the process of creating a VM.   Creating a VM - Location and size of the virtual drive    Your new VM should now appear in the list of VM s on the left side of the VirtualBox main interface. Selecting a VM in the list also displays some basic information about the VM.   A new VM is added to your current list of VM s", 
            "title": "Creating a Virtual Machine"
        }, 
        {
            "location": "/virtual_machine/#configuring-the-virtual-machine", 
            "text": "Before installing an operating system on the newly created VM it is necessary to make a few configuration changes. Select the new VM and hit the  Settings  button on the main interface. You will be presented with the configuration settings of your VM.  Start by going to  General =  Advanced  and enabling the  bidirectional shared clipboard . This allows text to be copied to the clipboard in the VM and pasted in your host OS and vice versa. Also enable  bidirectional Drag n Drop . The resulting configuration is shown in the figure below.   Configure VM to allow bidirectional clipboard and drag n drop    Default the VM is configured with a single network adapter with NAT (Network Address Translation) enabled (Network tab). This means that the VM has access to the network and also has access to the Internet. However because of NAT we will not be able to connect to the VM from another machine using SSH without configuring port forwarding. Since later on in the LAB s we will need to do just that it is more convenient to change the network settings to a  Bridged Adapter  as shown in the figure below. Make sure to the select your physical Ethernet adapter to bridge with and not your wireless interface.   Configure VM to bridge the virtual and physical adapters     Bridged Adapter  This will basically create a network bridge between the VM s network adapter and your physical host adapter making your VM s directly available on your network. This may be a security issue but can also simplify working with your VM. This option also implies that your VM will get its IP address from the same DHCP (Dynamic Host Configuration Protocol) server as your host machine if you have a DHCP enabled network.", 
            "title": "Configuring the Virtual Machine"
        }, 
        {
            "location": "/virtual_machine/#installing-an-operating-system-on-the-virtual-machine", 
            "text": "Before we can install an operating system on our virtual machine,  it is necessary to download an installation image for the Linux distribution we will be using. This image can then be mounted on our VM allowing us to boot from it. In our case we will use Linux Mint 17.3 (Rosa) - Cinnamon (64-bit),  which can be downloaded from  https://www.linuxmint.com/download.php . Make sure to select the 64-bit Desktop edition. Linux Mint is derivative of Ubuntu,  but with a less intrusive graphical desktop environment.  Once downloaded start VirtualBox and open the setting of your VM. Next open the storage settings. Now select the virtual CD/DVD drive below the IDE controller as shown in step 1 in the figure below:   Steps for mounting an image in VirtualBox    Hit the small CD/DVD icon next to the IDE Secondary Master dropdown (step 2 in the figure above) and select  Choose a virtual CD/DVD disk file   A browse window will open; select the image file you downloaded from the Linux Mint website and hit OK. Hit the OK button of the setting panel to close it.  Ready ? Then hit the start button of the VM and follow the steps for installing the Linux Mint operating system. If you see the automatic boot screen shown below do nothing an let it pass. Linux Mint will boot in Live mode and allow you to start the install process from that point on.   Live DVD or boot menu option    To start the installation process just double click the  Install Linux Mint  icon on the desktop.   Starting the installation process    From this point on all steps are self-explanatory. Most of the installation steps can be kept to their default values.  If you click inside the VM window your mouse cursor will automatically be captured. Releasing your cursor can be achieved using the right CTRL key.  Once the installation procedure is finished you will be asked to reboot the VM.", 
            "title": "Installing an Operating System on the Virtual Machine"
        }, 
        {
            "location": "/virtual_machine/#installing-guest-additions", 
            "text": "You may or may not have noticed that your mouse movement is a bit sluggish within the VM. That is because the guest additions haven not been installed yet.  Open the Devices menu which can be found at the top of the VM window. Next select  Insert Guest Additions CD image   as shown in the figure below. A window in Linux will open asking if you d wish to run the package. Hit run and follow the instructions.   Inserting the Guest Additions for Linux Mint    Once finished remove the image from the virtual drive (by right clicking the icon on the Desktop of Linux Mint and choosing Eject). Restart the virtual machine.   Updates  If you update your machine it is necessary to repeat this procedure.   You should now be able to resize the guest window. Or you can switch to fullscreen by hitting  RCTRL-F .   Software Rendering Mode  If you get a popup after login saying that Linux Mint is running in software rendering mode,  it can be fixed by going to  Settings =  Display =  Screen  and enabling  3D Acceleration  of your virtual machine. Make sure to restart the VM.", 
            "title": "Installing Guest Additions"
        }, 
        {
            "location": "/virtual_machine/#creating-a-shared-folder", 
            "text": "Some files can be dragged and dropped between your host machine and the VM. However this does not seem to be possible for all file types. For these instances it is more easy to create a shared directory which can be accessed from your host and the VM.  Navigate to  Settings =  Shared Folders  of your virtual machine as depicted in the figure below:   Shared folders settings of VM    Create a shared folder on your system and make sure to select the  Auto-mount  option as shown in the figure below.   Creating a shared folder for your VM    The folder should now be automatically mounted under /media in your VM on your next reboot and should also be available on the Desktop of Linux Mint. However if you try to open the folder you will get a permission error. To fix this it is ncessary to add your used to the group  vboxsf . You can achieve this by opening up a terminal ( CTRL-ALT-T ) and entering the command below. More on this later.  $ sudo usermod -a -G vboxsf  your_account_name    Command Line instructions  Note how the commands in this course are all proceeded by the dollar sign ($). This is the symbol that indicates the end of the prompt and should not be typed. Different distributions or shells may show different symbols for this.   Next logout from the current session and log back in. Open up a new terminal and enter the  id  command to get a list of all the groups your user belongs to.  111(vboxsf)  should be one of them.  $ id\nuid=1000(bioboost) gid=1000(bioboost) groups=1000(bioboost), 4(adm), 24(cdrom), 27(sudo), 30(dip), 46(plugdev), 107(lpadmin), 110(sambashare), 111(vboxsf)", 
            "title": "Creating a shared folder"
        }, 
        {
            "location": "/virtual_machine/#backups-and-snapshots", 
            "text": "It is always a good idea to backup your project files. You can now easily copy them to shared folder and put them on OneDrive, DropBox or a USB stick.  Another good idea is to create periodical snapshots of your virtual machine. This snapshot will contain all the delta s compared to the previous state of the VM. Just select the VM you want to create a snapshot of and hit the  Snapshots  button in the top right corner of VirtualBox. Next click the left icon to create a snapshot. Fill in the name and description as shown in the figure below.   Creating a VM snapshot    Adding a decent description will save you the misery of having the search through the snapshots for the correct state if your VM should fail.  You could even do this after every LAB session.", 
            "title": "Backups and snapshots"
        }, 
        {
            "location": "/about/", 
            "text": "About\n\n\nThis course was created by Nico De Witte as part of the Electronics - ICT training at Vives University College in Ostend / Bruges.\n\n\nMIT License\n\n\nCopyright (c) 2016 Nico De Witte\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \nSoftware\n), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "About"
        }, 
        {
            "location": "/about/#about", 
            "text": "This course was created by Nico De Witte as part of the Electronics - ICT training at Vives University College in Ostend / Bruges.", 
            "title": "About"
        }, 
        {
            "location": "/about/#mit-license", 
            "text": "Copyright (c) 2016 Nico De Witte  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the  Software ), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "MIT License"
        }
    ]
}